# Python中运算符的种类
# Python中的运算符包含以下类型：
# 算数运算符、比较（关系）运算符、赋值运算符、逻辑运算符、位运算符、成员运算符、身份运算符

# 算数运算符
# 算数运算符与数学上的定义一致
# 运算符	              描述                     示例                    结果
# +	                   加法	                    1 + 2                   3
# -	                   减法	                    2 - 1                   1
# *	                   乘法	                    2 * 3                   6
# /	                   除法	                    4 / 2                   2
# %	                   取余数                   5 % 2                   1
# **	                 幂运算	                  2 ** 3                  8
# //	                 整除	                    5 // 2                  2
# 注意：在使用除法、整除和取余数运算时除数不能为0，否则会报ZeroDivisionError错误

# 逻辑运算符
# 逻辑运算符用于逻辑运算，即判断逻辑真或假。
# 运算符	              描述
# and	                 逻辑与：当且仅当所有表达式为True时才会返回True
# or	                 逻辑或：只要其中一个表达式为True时返回True
# not	                 逻辑非：将逻辑值取反，表达式为True时返回False，表达式为False时返回True
# 示例：
print(True and False)     # False
print(True or False)      # True
print(not True)           # False
print(not False)          # True
print(True and True)      # True
print(False or True)      # True
# 注意：在使用or的时候，若前一个语句为True，后一个语句将不再执行，即：True or 1/0这个语句会正常执行，不会出现ZeroDivisionError，但是反过来就会报错

# 成员运算符
# 成员运算符用来判断某个对象是否包含于某个对象中，通常用在列表、元组、字典、字符串、集合、字节数组中
# 运算符	              描述                       示例                               结果
# in	                 成员运算符	                 "wjj" in "wjj20070926"            True
# not in	             非成员运算符	               'x' not in 'think'                True

# 身份运算符
# 身份运算符用于判断两个对象是否为同一个对象
# 运算符	              描述                                               等价表达式
# is	                 判断两个标识符是不是引用自一个对象               x is y 等价于 id(x) == id(y)
# is not	             判断两个标识符是不是引用自不同对象              x is not y 等价于 id(x) != id(y)
# is 和 == 的区别：==用于判断两个对象是否相等，is用于判断两个对象是否为同一个对象（即内存地址是否相同）
# 示例：
a = [1, 2, 3]
b = [1, 2, 3]
print(a == b)  # True，因为内容相同
a = [1, 2, 3]
b = a
print(a is b)  # True，因为 a 和 b 指向同一个对象
c = [1, 2, 3]
print(a is c)  # False，虽然内容相同，但不是同一个对象
# 特殊情况：小整数池与字符串驻留
# Python 为了优化内存，对一些小整数和字符串做了缓存，因此它们的 is 比较可能返回 True，但这不是普遍行为，不应依赖。
# 示例：
a = 100
b = 100
print(a == b)  # True
print(a is b)  # True（小整数池优化）
a = 1000
b = 1000
print(a == b)  # True
print(a is b)  # False（超出小整数池范围）
s1 = "hello"
s2 = "hello"
print(s1 == s2)  # True
print(s1 is s2)  # True（字符串驻留）
s3 = "hello world"
s4 = "hello world"
print(s3 == s4)  # True
print(s3 is s4)  # 可能为 True 或 False，取决于 Python 实现和版本，在3.13.5中为False
# 对于 None 的比较，推荐使用 is None，而不是 == ,因为 None 是单例对象。

# 位运算符
# 位运算符用于对整数进行位运算（二进制运算）。
# 运算符	              描述
# &	                   按位与：只有对应位都为1时，结果位才为1，否则为0
# |	                   按位或：只要对应位有一个为1时，结果位就为1，否则为0
# ^	                   按位异或：对应位相同时为0，不同时为1
# ~	                   按位非：按位取反，将1变为0，将0变为1，包含符号位，~x等价于-x-1（基于补码表示）
# <<	                 左移运算符：将整数的二进制位向左移动指定的位数，右侧补0，左移n位相当于乘以2^n
# >>	                 右移运算符：将整数的二进制位向右移动指定的位数，左侧补符号位（正数补0，负数补1），右移n位相当于除以2^n（向下取整）
# 示例：
a = 5                   # 二进制: 0101
b = 3                   # 二进制: 0011
print(a & b)          # 1 (二进制:0001)
print(a | b)          # 7 (二进制:0111)
print(a ^ b)          # 6 (二进制:0110)
print(~a)        # -6 (二进制:11111010)（补码表示）
print(a << 1)        # 10 (二进制:1010)
print(a >> 1)         # 2 (二进制 0010)
b = -5                  # 二进制:11111011（补码表示）
print(b >> 1)       # -3 (二进制:11111101)（补码表示）
# 应用：位运算符可用于实现一些高级功能，如位掩码、位运算等。
# 1.通过位掩码（bitmask）表示多个权限状态。
READ = 0b0001
WRITE = 0b0010
EXECUTE = 0b0100
permissions = READ | WRITE
print(permissions & READ)  # 检查是否包含 READ 权限
# 2.快速交换两个整数变量（无需临时变量）：
a = 3
b = 5
a ^= b
b ^= a
a ^= b
print(a, b)  # 输出: 5 3

# 赋值运算符
# 运算符	                描述                      等价表示
# =	                     赋值
# +=	                   加法赋值                 x += y 等价于 x = x + y
# -=	                   减法赋值                 x -= y 等价于 x = x - y
# *=	                   乘法赋值                 x *= y 等价于 x = x * y
# /=	                   除法赋值                 x /= y 等价于 x = x / y
# %=	                   取余数赋值	              x %= y 等价于 x = x % y
# **=	                   幂赋值                  x **= y 等价于 x = x ** y
# //=	                   取整除法赋值             x //= y 等价于 x = x // y
# &=	                   按位与赋值               x &= y 等价于 x = x & y
# |=	                   按位或赋值               x |= y 等价于 x = x | y
# ^=	                   按位异或赋值             x ^= y 等价于 x = x ^ y
# >>=	                   右移赋值                 x >>= y 等价于 x = x >> y
# <<=	                   左移赋值                 x <<= y 等价于 x = x << y
# :=	                   海象运算符:赋值并返回赋的值，使其允许在表达式内部进行变量赋值

# 比较运算符
# 比较运算符用于比较两个值的关系，返回布尔类型的值，成立为True，不成立为False
# 运算符	              描述                       示例               结果
# ==	                 等于	                      3 == 5            False
# !=	                 不等于	                    3 != 4            True
# >	                   大于	                      2 > 3             False
# <	                   小于	                      5 < 2             False
# >=	                 大于等于	                  10 >= 20          True
# <=	                 小于等于	                  2 <= 10           True
# 后面四种只能用于数字之间比较大小，前两种可以用于其他数据类型比较内容是否一致

# 运算符的优先级：（从上往下依次减小）
# 1.括号中的表达式
# 2.读取，切片，调用，属性引用
# 3.await 表达式
# 4.乘方（**）
# 5.正，负，按位非（+x，-x，~x）
# 6.乘，矩阵乘，除，整除，取余（*，@，/，//，%）
# 7.加，减（+，-）
# 8.位移（>>，<<）
# 9.按位与（&）
# 10.按位异或（^）
# 10.按位或（｜）
# 10.比较运算符、成员运算符、身份运算符（in,not in, is,is not, <, <=, >, >=, !=, ==）
# 12.逻辑非（not）
# 13.逻辑与（and）
# 14.逻辑或（or）
# 15.条件表达式（if …… else ）
# 16.lambda 表达式
# 15.赋值运算符
# 若多个同等级的运算符同时出现在表达式中，它们的运算顺序由结合性（Associativity）决定。
# 结合性分为两种类型：左结合（Left Associativity）和右结合（Right Associativity）
# 左结合运算符从左往右依次计算，右结合运算符从右往左依次计算
# 常见的左结合运算符有：除幂运算以外的算数运算符、位运算符、比较运算符、逻辑运算符
# 常见的右结合运算符有：幂运算符、赋值运算符、条件表达式
