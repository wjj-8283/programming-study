# 数据类型转换用的函数
# 函数                       描述
# int(x, base=m)            将x转换为m进制的整数，m可选2，8，10，16，若m不指定，则默认为10进制
# float(x)                  将x转换为浮点数
# complex(real,imag)        创建一个实部为real，虚部为imag的复数
# str(x)                    将x转换为字符串
# repr(x)                   将x转换为表达式字符串
# eval(str)                 用来计算在字符串中的有效Python表达式,并返回一个对象
# tuple(s)                  将序列s转换为一个元组
# list(s)                   将序列s转换为一个列表
# set(s)                    将序列s转换为可变集合
# dict(d)                   创建一个字典，d必须为(key,value)的元组序列
# frozenset(s)              转换为不可变集合
# chr(x)                    将一个整数转换为一个字符
# ord(x)                    将一个字符转换为它对应的整数值
# hex(x)                    将一个整数转换为它的十六进制字符串
# oct(x)                    将一个整数转换为它的八进制字符串

# 隐式数据类型转换
# 在隐式类型转换中，Python 会自动将一种数据类型转换为另一种数据类型，不需要我们去干预。
# 常见的隐式类型转换的实例：在不同类型数字运算中，较低的数据类型会自动转换为较高的数据类型
# "较高数据类型"和"较低数据类型"是在隐式类型转换中用于描述数据精度的概念。精度可以理解为数据类型能够表示的信息量或详细程度。在Python中，数据类型的"高"和"低"主要根据它们的精度来判断。
# 这里的"较高"数据类型指的是能够表示更多信息（或更精确信息）的数据类型，而"较低"的数据类型则表示的信息较少。
# 数据类型高低排列：复数>浮点数>整数>布尔类型
num_int = 123
num_flo = 1.23
num_bool = True
num_new1 = num_int + num_flo
num_new2 = num_bool + num_int
print("num_int 数据类型为:",type(num_int))
print("num_flo 数据类型为:",type(num_flo))
print("num_bool 数据类型为:",type(num_bool))
print("num_new1 值为:",num_new1)
print("num_new1 数据类型为:",type(num_new1))
print("num_new2 值为:",num_new2)
print("num_new2 数据类型为:",type(num_new2))
# 但是，隐式类型转换在一些情况下不一定会发生，主要的问题发生在跨类别的类型转换（比如字符串和数字之间的转换）中，
# 例如：
num_int = 123
num_str = "1234"
num_int + num_str   # TypeError: unsupported operand type(s) for +: 'int' and 'str'
# 这时，隐式类型转换就不管用了，需要进行显式类型转换

# 显式类型转换
# 在显式类型转换中，用户可以将对象的数据类型转换为所需的数据类型。 我们使用数据转换函数来执行显式类型转换。
# 比如：int()强制转换整数：
int(3)    # 3
int(2.8)  # 2
int("3")  # 3
# float()强制转换浮点型
float(3)      # 3.0
float("2.8")  # 2.8
float("3")    # 3.0
float(2.8)    # 2.8
# str()强制转换字符串类型
str("s1")     # 's1'
str(3)        # '3'
str(3.0)      # '3.0'
# 应用示例：整型和字符串类型进行运算
num_int = 123
num_str = "456"
print("num_int 数据类型为:",type(num_int))
print("类型转换前，num_str 数据类型为:",type(num_str))
num_str = int(num_str)    # 强制转换为整型
print("类型转换后，num_str 数据类型为:",type(num_str))
num_sum = num_int + num_str
print("num_int 与 num_str 相加结果为:",num_sum)
print("sum 数据类型为:",type(num_sum))

# 不同数据类型之间能否随意转化：
# 虽然Python提供了一些内置的函数来实现不同数据类型之间的转换，但并非所有类型的数据都可以被转换成其他任意类型。
# 转换是否可行，主要取决于数据本身是否包含足够的信息来表示目标类型。
# 例如：
# 你可以轻松地将整数转换为字符串，因为每一个整数都有一个明确的字符串表示（例如，整数123可以表示为字符串"123"）。
# 类似地，一个只包含数字字符的字符串（如"123"）可以被转换为一个整数或浮点数，因为这个字符串中包含了足够的信息来表示一个数字。
# 然而：
# 对于一个非数字字符串（如"Hello"），它无法被转换为一个整数或浮点数，因为这个字符串并不包含任何可以表示一个数字的信息。
# 对于一个列表或元组，它可以被转换为一个集合（如果它的元素是不可变的），但不能被转换为一个整数，因为一个集合或列表中的元素无法合理地表示为一个单独的数字。
# 总的来说，数据类型的转换并非无限制，它取决于原始数据是否能够提供足够的信息来表示目标类型。当你在编程中进行类型转换时，需要注意这一点。